{"version":3,"sources":["components/UserInfo/UserInfo.tsx","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","api/users.ts","App.tsx","api/todos.ts","index.tsx"],"names":["UserInfo","user","name","email","className","href","TodoInfo","todo","id","title","completed","classNames","TodoList","todos","map","username","userId","usersFromServer","find","App","useState","currentTodos","setCurrentTodos","selectedUser","setSelectedUser","setTitle","isTitled","setIsTitled","userIsSelected","setUserIsSelected","getMaxID","Math","max","action","method","onSubmit","event","preventDefault","userToAdd","trim","length","htmlFor","type","value","placeholder","onChange","target","disabled","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.1358bb87.chunk.js","sourcesContent":["import { FC } from 'react';\nimport { User } from '../../Types/User';\n\ninterface Props {\n  user: User,\n}\n\nexport const UserInfo: FC<Props> = ({ user }) => {\n  const { name, email } = user;\n\n  return (\n    <a className=\"UserInfo\" href={`mailto:${email}`}>\n      {name}\n    </a>\n  );\n};\n","import { FC } from 'react';\nimport classNames from 'classnames';\nimport { UserInfo } from '../UserInfo';\nimport { Todo } from '../../Types/Todo';\n\ninterface Props {\n  todo: Todo,\n}\n\nexport const TodoInfo: FC<Props> = ({ todo }) => {\n  const {\n    id,\n    title,\n    user,\n    completed,\n  } = todo;\n\n  return (\n    <article\n      data-id={id}\n      className={classNames(\n        'TodoInfo',\n        {\n          'TodoInfo--completed': completed,\n        },\n      )}\n    >\n      <h2 className=\"TodoInfo__title\">\n        {title}\n      </h2>\n      {user && <UserInfo user={user} />}\n    </article>\n  );\n};\n","import { FC } from 'react';\nimport { Todo } from '../../Types/Todo';\nimport { TodoInfo } from '../TodoInfo';\n\ninterface Props {\n  todos: Todo[]\n}\n\nexport const TodoList: FC<Props> = ({ todos }) => (\n  <section className=\"TodoList\">\n    {todos.map(todo => (\n      <TodoInfo key={todo.id} todo={todo} />\n    ))}\n  </section>\n);\n","export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","import './App.scss';\nimport { useState } from 'react';\nimport { TodoList } from './components/TodoList';\n\nimport { User } from './Types/User';\nimport { Todo } from './Types/Todo';\n\nimport usersFromServer from './api/users';\nimport todosFromServer from './api/todos';\n\nfunction getUserById(userId: number): User | null {\n  return usersFromServer.find(user => user.id === userId) || null;\n}\n\nexport const todos: Todo[] = todosFromServer.map(todo => ({\n  ...todo,\n  user: getUserById(todo.userId),\n}));\n\nexport const App = () => {\n  const [currentTodos, setCurrentTodos] = useState(todos);\n  const [selectedUser, setSelectedUser] = useState(0);\n  const [title, setTitle] = useState('');\n  const [isTitled, setIsTitled] = useState(true);\n  const [userIsSelected, setUserIsSelected] = useState(true);\n\n  const getMaxID = Math.max(...currentTodos.map((todo: Todo) => todo.id));\n\n  const handleSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n\n    const userToAdd = usersFromServer.find(user => (\n      user.id === selectedUser));\n\n    if (userToAdd && title.trim().length > 0) {\n      setCurrentTodos([\n        ...currentTodos,\n        {\n          id: getMaxID + 1,\n          title: `${title}`,\n          completed: false,\n          userId: userToAdd.id,\n          user: userToAdd,\n        },\n      ]);\n      setTitle('');\n      setSelectedUser(0);\n    }\n\n    if (title.trim().length === 0) {\n      setIsTitled(false);\n    }\n\n    if (!selectedUser) {\n      setUserIsSelected(false);\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Add todo form</h1>\n\n      <form\n        action=\"/api/users\"\n        method=\"POST\"\n        onSubmit={handleSubmit}\n      >\n        <div className=\"field\">\n          <label htmlFor=\"title\">Title: </label>\n          <input\n            type=\"text\"\n            id=\"title\"\n            data-cy=\"titleInput\"\n            value={title}\n            placeholder=\"Enter a title\"\n            onChange={(event) => {\n              setTitle(event.target.value);\n              setIsTitled(true);\n            }}\n          />\n          {!isTitled && (\n            <span className=\"error\">\n              Please enter a title\n            </span>\n          )}\n        </div>\n\n        <div className=\"field\">\n          <label htmlFor=\"user\">User: </label>\n          <select\n            id=\"user\"\n            data-cy=\"userSelect\"\n            value={selectedUser}\n            onChange={(event) => {\n              setSelectedUser(+event.target.value);\n              setUserIsSelected(true);\n            }}\n          >\n            <option value=\"0\" disabled>\n              Choose a user\n            </option>\n            {usersFromServer.map(user => (\n              <option key={user.id} value={user.id}>\n                {user.name}\n              </option>\n            ))}\n\n          </select>\n\n          {!userIsSelected && (\n            <span className=\"error\">Please choose a user</span>\n          )}\n        </div>\n\n        <button type=\"submit\" data-cy=\"submitButton\">\n          Add\n        </button>\n      </form>\n\n      <TodoList todos={currentTodos} />\n    </div>\n  );\n};\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'some other todo',\n    completed: false,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}